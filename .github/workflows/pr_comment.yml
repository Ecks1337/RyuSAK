name: Comment artifacts links on PRs

on:
  workflow_run:
    workflows: ['Build']
    types: [completed]

jobs:
  pr_comment:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = ${{github.event.workflow_run.id}};
            const pull_head_sha = "${{github.event.workflow_run.head_sha}}";

            const issue_number = await (async () => {
              const pulls = await github.rest.pulls.list({owner, repo});
              for await (const { data } of github.paginate.iterator(pulls)) {
                for (const pull of data) {
                  if (pull.head.sha === pull_head_sha) {
                    return pull.number;
                  }
                }
              }
            })();
            if (issue_number) {
              core.info(`Matched pull request ${issue_number}`);
            } else {
              return core.error("No matching pull request found");
            }

            const { data: { artifacts } } = await github.rest.actions.listWorkflowRunArtifacts({owner, repo, run_id});
            if (!artifacts.length) {
              return core.error("No build artifacts found");
            }

            let body = "Download the build artifacts for this pull request:";
            for (let artifact of artifacts) {
              body += `\n* [${artifact.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${artifact.id}.zip)`;
            }

            const { data: comments } = await github.rest.issues.listComments({repo, owner, issue_number});
            const existing_comment = comments.find((comment) => comment.user.login === 'github-actions[bot]');
            if (existing_comment) {
              core.info(`Updating existing comment ${existing_comment.id}`);
              await github.rest.issues.updateComment({repo, owner, comment_id: existing_comment.id, body});
            } else {
              core.info("Creating a new comment");
              await github.rest.issues.createComment({repo, owner, issue_number, body});
            }
